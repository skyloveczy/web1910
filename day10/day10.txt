数据库
  存放数据的仓库
  用于数据的存取

  主要分为:
    关系型数据库
      oracle,mysql,SqlServer,DB2
    非关系型数据库
      mongodb

  关系型数据库:
    里面的数据是以表格的形式存储的,每一张表格必须有明确的字段
    保存的每一条数据都可以称之为记录,该记录的格式必须与字段保持一致
    数据库中保存表,表中存记录,记录与字段保持一致
    特点:
      数据的保存有行和列,数据之间是有关系的,不是散的
      数据库提供了很多后台语言的使用接口,使增删改查操作更方便

    缺点:
      字段使数据操作不够灵活
      某些时候,必须要填入数据,不能不填

  非关系型数据库:
    特点:
      数据库中保存的是集合,集中中保存的数据称之为文档

    使用场景:
      1. 数据结构比较简单的场景
      2. 需要灵活性更强的IT系统
      3. 对数据库性能要求较高
      4. 不需要数据高度的一致性
      5. 给定key能快速映射对应值得环境


MongoDB的安装
  默认安装,安装成功后,配置环境变量(官网上的最新版本不需要配置)
  配置环境变量:
    右击我的电脑--属性
    --高级系统设置--环境变量
    --双击Path(变量名不变,变量值不动)
    --将光标移动到变量值的末尾,添加一个英文的分号
    --复制mongodb的安装路径C:\Program Files\MongoDB\Server\3.0\bin
    --将其粘贴到分号的后面,确定
  配置完成后,重新打开命令窗口,输入mongo命令

mongodb数据库的使用
  1. 启动数据库
    mongod
    该命令会启动数据库服务,但是使用的是默认的文件夹 C:/data/db
    如果该文件夹不存在,则报错
    mongod --dbpath 数据库文件夹路径

    当出现on port 27017则说明启动成功

    注意: 启动成功后,该命令窗口不能关闭

  2. 连接数据库
    mongo
    重新打开一个命令窗口,输入命令即可连接

    注意: 连接成功后,会进入到mongodb 的环境,此时可以使用mongodb的shell命令
    如果要退出mongo环境,输入exit,或者按ctrl+C

  3. 查看当前服务器上有哪些数据库
    show dbs

  4. 使用/创建数据库
    use 数据库名称
    如果数据不存在,则创建一个新的数据库
    如果存在,则使用该数据库

    使用use创建数据库,并不会立即创建出来,只有当真正的向数据库中插入数据时,才会真正的创建

  5. 查看当前在哪个数据库中
    db
  
  6. 向数据库中插入数据
    db.集合名.insert(json数据);

    比如: 向学生集合中插入一条数据(文档)
    db.stu.insert({id:101,name:"Jim",age:23});


    练习:
      将所有数据库文件删除关闭服务
      1. 启动服务,连接服务器
      2. 查看当前服务器有哪些数据库
      3. 查看当前在哪个数据中
      4. 创建一个web数据库,并切换进去
      5. 往数据库中插入数据

      db.stu.insert({id:101,name:"jim",age:23});
      db.stu.insert({id:102,name:"mike",gender:"M"});
      db.stu.insert({id:103,name:"lucy",age: 12,gender:"F"});
      db.stu.insert({id:103,name:"lily"});

  7. 查看当前数据库中有哪些集合
    show collections

  8. 查看某个集合中所有的数据(文档)
    db.集合名.find()
    db.集合名.find({})
    参数为查询的条件,比如:
      查询name值为jim的信息
      db.stu.find({name:"jim"})
    如果参数是一个空对象,则表示无条件查询(即查询所有数据),
    此时可以将参数省略不写

  9. 删除数据
    db.集合名.remove({删除条件})
    删除集合中符合给定条件的数据
    如果是无条件删除,则条件为{},但是不能不写
    比如: 删除名字为jim的数据
      db.stu.remove({name:"jim"});

  10. 修改数据
    db.集合名.update({修改的条件},{修改的数据}) ---- 替换
    修改的数据如果直接写数据,则会将原来的整条数据给替换为给定的数据,而不是修改
    如果要修改某个属性,则必须要添加一个$set
    db.集合名.update({条件},{$set: {数据} }); ----修改给定的值

    批量修改,则需要再添加一个参数
    db.集合名.update({条件},{$set: {数据} }, {multi: true})


  11. 从外部导入数据
    mongoimport -d 数据库名称 -c 集合名称 文件路径
    该命令和mongod,mongo命令一样,要在Windows环境下使用

  12. 删除某个集合
    db.集合名.drop()

  13. 删除数据库
    db.dropDatabase()
    删除当前所在的数据库

    注意:
      如果删除成功,输入db查看当前在哪个数据库时,显示的依然是被删除的数据库
      相当于刚连接数据库use之后,还没有向数据库中添加数据的状态



数据库中常用的几种关系:
  1. 相等关系
    $eq  equal
    查询年龄为21岁的信息
    db.student.find({age:21});
    db.student.find({age:{$eq:21}})

  2. 大于,大于等于
    $gt    greater than
    $gte   greater than or equal
    查询年龄大于21岁的信息
    db.student.find({age:{$gt:21}})

  3. 小于,小于等于
    $lt    less than
    $lte   less than or equal

  4. 不相等
    $ne   not equal
    查询年龄不是21岁的信息
    db.student.find({age:{$ne:21}}) 

数据库中的逻辑
  1. 与 
    $and 并且
    查询年龄大于21岁,并且性别为F的信息
    db.student.find({gender:"F",age:{$gt:21}});

    数组中的条件必须都要满足
    db.student.find({$and:[ {gender:"F"},{age:{$gt:21}} ] });

  2. 或
    $or
    数组中的条件只需要满足其中任意一个即可
    查询年龄大于21岁或性别为F的信息
    db.student.find({$or:[ {gender:"F"},{age:{$gt:21}} ] });
  3. 非
    $not

    查询  年龄大于22岁的(不要) 信息
    db.student.find({age:{$lte:22}});

    db.student.find({age: {$not:{$gt:22}} });

    查询年龄不是22岁的信息
    db.student.find({age:{$not:{$eq:22}}});
    db.student.find({$or:[{age:{$gt:22}},{age:{$lt:22}}]});


  4. 既不也不
    $nor
    数组中的条件都不要满足
    {$nor: [{},{},{}]}
